blueprint:
  name: "Raumlüftungsempfehlung (Feuchte + CO₂)"
  description: "Raumweise Lüftungsempfehlung basierend auf rel./abs. Luftfeuchtigkeit, optional CO₂, unter Berücksichtigung von Fensterstatus und Personenanwesenheit."
  domain: automation

  input:
    indoor_humidity:
      name: "Relative Luftfeuchtigkeit Innen (%)"
      selector:
        entity:
          domain: sensor
          device_class: humidity
    indoor_absolute:
      name: "Absolute Luftfeuchtigkeit Innen (g/m³)"
      selector:
        entity:
          domain: sensor
    outdoor_absolute:
      name: "Absolute Luftfeuchtigkeit Außen (g/m³)"
      selector:
        entity:
          domain: sensor
    window_sensors:
      name: "Fenstersensor(en) (optional)"
      default: []
      selector:
        entity:
          domain: binary_sensor
          device_class: window
          multiple: true
    presence_persons:
      name: "Personen zur Anwesenheit"
      default: []
      selector:
        entity:
          domain: person
          multiple: true
    co2_sensor:
      name: "Optionaler CO₂-Sensor"
      default: ""
      selector:
        entity:
          domain: sensor
          device_class: carbon_dioxide
    threshold_relative:
      name: "Rel. LF-Schwelle (%)"
      default: 60
      selector:
        number:
          min: 40
          max: 80
          step: 1
    threshold_difference:
      name: "Absolute LF-Differenz Schwelle (g/m³)"
      default: 2
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
    co2_threshold:
      name: "CO₂-Schwelle (ppm)"
      default: 1400
      selector:
        number:
          min: 400
          max: 2000
          step: 50
    min_vent_duration:
      name: "Mindest-Lüftungsdauer (Minuten)"
      default: 10
      selector:
        number:
          min: 1
          max: 60
          step: 1
    repeat_interval:
      name: "Wiederholintervall (Minuten)"
      default: 60
      selector:
        number:
          min: 5
          max: 120
          step: 5
    time_start:
      name: "Start Zeitfenster"
      default: "06:00"
      selector:
        time:
    time_end:
      name: "End Zeitfenster"
      default: "22:00"
      selector:
        time:

mode: single  # <— wichtig: keine Delays/Waits werden abgebrochen

variables:
  sensor_humidity: !input indoor_humidity
  sensor_absolute: !input indoor_absolute
  sensor_outdoor: !input outdoor_absolute
  sensor_windows: !input window_sensors
  sensor_persons: !input presence_persons
  sensor_co2: !input co2_sensor
  threshold_relative: !input threshold_relative
  threshold_difference: !input threshold_difference
  co2_threshold: !input co2_threshold
  min_vent_duration: !input min_vent_duration
  repeat_interval: !input repeat_interval
  time_start: !input time_start
  time_end: !input time_end

  rh_in: "{{ states(sensor_humidity) | float(0) }}"
  abs_in: "{{ states(sensor_absolute) | float(0) }}"
  abs_out: "{{ states(sensor_outdoor) | float(0) }}"

  diff: "{{ abs_in - abs_out }}"
  co2: >
    {% if sensor_co2 != '' %}
      {{ states(sensor_co2) | float(0) }}
    {% else %}
      0
    {% endif %}
  window_open: >
    {% if sensor_windows | length > 0 %}
      {{ expand(sensor_windows) | selectattr('state','eq','on') | list | count > 0 }}
    {% else %}
      false
    {% endif %}
  high_humidity: >
    {{ rh_in > threshold_relative and diff > threshold_difference }}
  bad_co2: >
    {% if sensor_co2 != '' %}
      {{ co2 > co2_threshold }}
    {% else %}
      false
    {% endif %}
  # Sommer-Block: vermeide CO₂-Lüften bei schwüler Außenluft oder wenn außen nicht trockener ist (kleine Hysterese 1 g/m³)
  summer_block: >
    {{ abs_out >= (abs_in - 1) and abs_out > 14 }}
  someone_home: >
    {% if sensor_persons | length > 0 %}
      {% set persons = expand(sensor_persons) %}
      {{ persons | selectattr('state','eq','home') | list | count > 0 }}
    {% else %}
      true
    {% endif %}
  # Zeitfenster robust auch über Mitternacht
  within_time: >
    {% set start = today_at(time_start).time() %}
    {% set end = today_at(time_end).time() %}
    {% set nowt = now().time() %}
    {% if start <= end %}
      {{ start <= nowt <= end }}
    {% else %}
      {{ nowt >= start or nowt <= end }}
    {% endif %}

  # Öffnen nur wenn Fenster zu, Zeit ok, jemand da, Sommerblock greift, und (Feuchte-ODER-CO₂)
  should_vent: >
    {{ within_time and someone_home and not window_open and (high_humidity or (bad_co2 and not summer_block)) }}
  # Schließen-Empfehlung mit Hysterese
  should_close: >
    {{ window_open and (diff < 1 or rh_in < 55 or abs_in < abs_out) }}
  warn_window_open_absent: >
    {{ not someone_home and window_open and (sensor_windows | length > 0) }}

trigger:
  # Sensoränderungen
  - platform: state
    entity_id: !input indoor_humidity
  - platform: state
    entity_id: !input indoor_absolute
  - platform: state
    entity_id: !input outdoor_absolute
  - platform: state
    entity_id: !input window_sensors
  - platform: state
    entity_id: !input presence_persons
  # Minutentakt, damit CO₂/Zeitrand/Reminder sauber funktionieren
  - platform: time_pattern
    minutes: "/1"
  # Zeitfenster-Kanten sicher abholen
  - platform: time
    at: !input time_start
  - platform: time
    at: !input time_end

action:
  - choose:
      # 1) Schließen hat Priorität – aber erst nach Mindestdauer erneut prüfen
      - conditions: "{{ should_close }}"
        sequence:
          - delay:
              minutes: "{{ min_vent_duration }}"
          - if:
              - condition: template
                value_template: "{{ should_close }}"
            then:
              - service: notify.mobile_app_iphone_von_chris
                data:
                  title: "Fenster schließen"
                  message: >
                    Fenster schließen empfohlen! Innen: {{ rh_in | round(1) }} % rF,
                    Δabs: {{ diff | round(1) }} g/m³{% if sensor_co2 != '' %}, CO₂: {{ co2 | round(0) }} ppm{% endif %}
      # 2) Öffnen/Erinnern mit Wiederholung, solange Bedingung gilt
      - conditions: "{{ should_vent }}"
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: "{{ should_vent }}"
              sequence:
                - service: notify.mobile_app_iphone_von_chris
                  data:
                    title: "Lüften"
                    message: >
                      Lüften empfohlen! Innen: {{ rh_in | round(1) }} % rF,
                      Δabs: {{ diff | round(1) }} g/m³{% if sensor_co2 != '' %}, CO₂: {{ co2 | round(0) }} ppm{% endif %}
                - wait_for_trigger:
                    # Schleife endet, wenn Lüftbedarf weg ist ...
                    - platform: template
                      id: stop_vent
                      value_template: "{{ not should_vent }}"
                    # ... oder wenn nach Mindestdauer ein Schließkriterium erfüllt ist
                    - platform: template
                      id: close_ready
                      value_template: "{{ should_close }}"
                      for:
                        minutes: "{{ min_vent_duration }}"
                  timeout:
                    minutes: "{{ repeat_interval }}"
                  continue_on_timeout: true
                - choose:
                    - conditions: "{{ wait.trigger and wait.trigger.id == 'close_ready' }}"
                      sequence:
                        - service: notify.mobile_app_iphone_von_chris
                          data:
                            title: "Fenster schließen"
                            message: >
                              Fenster schließen empfohlen! Innen: {{ rh_in | round(1) }} % rF,
                              Δabs: {{ diff | round(1) }} g/m³
                        - stop: "Schließen empfohlen – Ende."
                    - conditions: "{{ wait.trigger and wait.trigger.id == 'stop_vent' }}"
                      sequence:
                        - stop: "Lüftbedarf vorbei – Ende."
      # 3) Warnung: Fenster offen, niemand da
      - conditions: "{{ warn_window_open_absent }}"
        sequence:
          - service: notify.mobile_app_iphone_von_chris
            data:
              title: "Fenster offen"
              message: "Achtung: Fenster noch offen, während niemand zuhause ist!"
