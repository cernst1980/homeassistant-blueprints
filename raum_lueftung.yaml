blueprint:
  name: "Raumlüftungsempfehlung (Feuchte + CO₂)"
  description: "Raumweise Lüftungsempfehlung basierend auf rel./abs. Luftfeuchtigkeit, optional CO₂, unter Berücksichtigung von Fensterstatus und Personenanwesenheit."
  domain: automation

  input:
    indoor_humidity:
      name: "Relative Luftfeuchtigkeit Innen (%)"
      selector:
        entity:
          domain: sensor
          device_class: humidity
    indoor_absolute:
      name: "Absolute Luftfeuchtigkeit Innen (g/m³)"
      selector:
        entity:
          domain: sensor
    outdoor_absolute:
      name: "Absolute Luftfeuchtigkeit Außen (g/m³)"
      selector:
        entity:
          domain: sensor
    window_sensors:
      name: "Fenster-/Türsensor(en) (optional)"
      default: []
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - window
            - door
          multiple: true
    presence_persons:
      name: "Personen zur Anwesenheit"
      default: []
      selector:
        entity:
          domain: person
          multiple: true
    co2_sensor:
      name: "Optionaler CO₂-Sensor"
      default: ""
      selector:
        entity:
          domain: sensor
          device_class: carbon_dioxide
    threshold_relative:
      name: "Rel. LF-Schwelle (%)"
      default: 60
      selector:
        number:
          min: 40
          max: 80
          step: 1
    threshold_difference:
      name: "Absolute LF-Differenz Schwelle (g/m³)"
      default: 2
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
    co2_threshold:
      name: "CO₂-Schwelle (ppm)"
      default: 1400
      selector:
        number:
          min: 400
          max: 2000
          step: 50
    min_vent_duration:
      name: "Mindest-Lüftungsdauer (Minuten)"
      default: 10
      selector:
        number:
          min: 1
          max: 60
          step: 1
    repeat_interval:
      name: "Nachrichten-Delay (Stunden)"
      default: 1
      selector:
        number:
          min: 1
          max: 24
          step: 1
    time_start:
      name: "Start Zeitfenster"
      default: "06:00"
      selector:
        time:
    time_end:
      name: "End Zeitfenster"
      default: "22:00"
      selector:
        time:
    notify_targets:
      name: "Benachrichtigung an"
      selector:
        device:
          filter:
            - integration: mobile_app
          multiple: true

mode: single

variables:
  # Sensorwerte
  sensor_humidity: !input indoor_humidity
  sensor_absolute: !input indoor_absolute
  sensor_outdoor: !input outdoor_absolute
  sensor_windows: !input window_sensors
  sensor_persons: !input presence_persons
  sensor_co2: !input co2_sensor

  # Schwellenwerte / Einstellungen
  threshold_relative: !input threshold_relative
  threshold_difference: !input threshold_difference
  co2_threshold: !input co2_threshold
  min_vent_duration: !input min_vent_duration
  repeat_interval: !input repeat_interval
  time_start: !input time_start
  time_end: !input time_end
  notify_targets: !input notify_targets

  # Berechnete Werte
  rh_in: "{{ states(sensor_humidity) | float(0) }}"
  abs_in: "{{ states(sensor_absolute) | float(0) }}"
  abs_out: "{{ states(sensor_outdoor) | float(0) }}"
  area: "{{ area_name(sensor_humidity) }}"
  diff: "{{ abs_in - abs_out }}"
  co2: "{{ states(sensor_co2) | float(0) if sensor_co2 != '' else 0 }}"
  invalid_sensor: "{{ rh_in <= 1 or abs_in <= 0.5 }}"

  # Fensterstatus / Anwesenheit / Zeit
  no_windows: "{{ (sensor_windows | length) == 0 }}"
  window_open: >
    {{ sensor_windows | length > 0 and (expand(sensor_windows) | selectattr('state','eq','on') | list | length > 0) }}
  someone_home: >
    {% if sensor_persons | length > 0 %}
      {{ expand(sensor_persons) | selectattr('state','eq','home') | list | length > 0 }}
    {% else %}
      {{ true }}
    {% endif %}
  within_time: >
    {% set now_ts = as_timestamp(now()) %}
    {% set start_ts = as_timestamp(today_at(time_start)) %}
    {% set end_ts = as_timestamp(today_at(time_end)) %}
    {{ start_ts <= now_ts <= end_ts if start_ts <= end_ts else now_ts >= start_ts or now_ts <= end_ts }}

  # Luftwerte
  high_humidity: "{{ rh_in > threshold_relative and diff > threshold_difference }}"
  bad_co2: "{{ (sensor_co2 != '') and (co2 > co2_threshold) }}"
  summer_block: "{{ abs_out > abs_in + 3 }}"

  # Entscheidungen
  should_vent: >
    {{ not invalid_sensor and within_time and someone_home and (no_windows or not window_open) and (high_humidity or (bad_co2 and not summer_block)) }}
  should_close: >
    {{ not invalid_sensor and within_time and someone_home and (window_open or no_windows) and not bad_co2 and (diff < 1 or rh_in < 55 or abs_in < abs_out) }}
  warn_window_open_absent: >
    {{ within_time and not someone_home and window_open and not no_windows }}
  vent_duration_passed: >
    {% if not no_windows and window_open %}
      {% set oldest = expand(sensor_windows) | selectattr('state','eq','on') | map(attribute='last_changed') | min %}
      {{ (as_timestamp(now()) - as_timestamp(oldest)) / 60 >= min_vent_duration }}
    {% else %}
      {{ true }}
    {% endif %}

triggers:
  - trigger: state
    entity_id: !input indoor_humidity
  - trigger: state
    entity_id: !input indoor_absolute
  - trigger: state
    entity_id: !input outdoor_absolute
  - trigger: state
    entity_id: !input window_sensors
  - trigger: state
    entity_id: !input presence_persons
  - enabled: false
    trigger: state
    entity_id: !input co2_sensor
  - trigger: time
    at: !input time_start
  - trigger: time
    at: !input time_end

action:
  - choose:
      # Fenster schließen → sofort
      - conditions: "{{ should_close and vent_duration_passed }}"
        sequence:
          - repeat:
              for_each: "{{ notify_targets }}"
              sequence:
                - service: "notify.mobile_app_{{ device_attr(repeat.item,'name') | slugify }}"
                  data:
                    title: "{{ area }} - Fenster schließen"
                    message: >
                      Fenster schließen empfohlen! Innen: {{ rh_in | round(1) }} % rF,
                      Δabs: {{ diff | round(1) }} g/m³{% if sensor_co2 != '' %}, CO₂: {{ co2 | round(0) }} ppm{% endif %}
                    data:
                      push:
                        interruption-level: time-sensitive
                      tag: lueften_{{ area | slugify }}
          - service: persistent_notification.create
            data:
              title: "{{ area }} - Fenster schließen"
              message: >
                Fenster schließen empfohlen! Innen: {{ rh_in | round(1) }} % rF,
                Δabs: {{ diff | round(1) }} g/m³{% if sensor_co2 != '' %}, CO₂: {{ co2 | round(0) }} ppm{% endif %}
              notification_id: lueften_{{ area | slugify }}
          - wait_template: "{{ not (should_close and vent_duration_passed) }}"
            timeout:
              hours: "{{ repeat_interval }}"
            continue_on_timeout: true

      # Lüften / Reminder
      - conditions: "{{ should_vent }}"
        sequence:
          - repeat:
              for_each: "{{ notify_targets }}"
              sequence:
                - service: "notify.mobile_app_{{ device_attr(repeat.item,'name') | slugify }}"
                  data:
                    title: "{{ area }} - Lüften"
                    message: >
                      Lüften empfohlen! Innen: {{ rh_in | round(1) }} % rF,
                      Δabs: {{ diff | round(1) }} g/m³{% if sensor_co2 != '' %}, CO₂: {{ co2 | round(0) }} ppm{% endif %}
                    data:
                      push:
                        interruption-level: time-sensitive
                      tag: lueften_{{ area | slugify }}
          - service: persistent_notification.create
            data:
              title: "{{ area }} - Lüften"
              message: >
                Lüften empfohlen! Innen: {{ rh_in | round(1) }} % rF,
                Δabs: {{ diff | round(1) }} g/m³{% if sensor_co2 != '' %}, CO₂: {{ co2 | round(0) }} ppm{% endif %}
              notification_id: lueften_{{ area | slugify }}
          - wait_template: "{{ not should_vent }}"
            timeout:
              hours: "{{ repeat_interval }}"
            continue_on_timeout: true

      # Warnung Fenster offen, niemand zuhause
      - conditions: "{{ warn_window_open_absent }}"
        sequence:
          - repeat:
              for_each: "{{ notify_targets }}"
              sequence:
                - service: "notify.mobile_app_{{ device_attr(repeat.item,'name') | slugify }}"
                  data:
                    title: "{{ area }} - Fenster offen"
                    message: "Achtung: Fenster noch offen, während niemand zuhause ist!"
                    data:
                      push:
                        interruption-level: time-sensitive
                      tag: lueften_{{ area | slugify }}
          - service: persistent_notification.create
            data:
              title: "{{ area }} - Fenster offen"
              message: "Achtung: Fenster noch offen, während niemand zuhause ist!"
              notification_id: lueften_{{ area | slugify }}
          - wait_template: "{{ not warn_window_open_absent }}"
            timeout:
              hours: "{{ repeat_interval }}"
            continue_on_timeout: true
